/*
 * $Author: vasyl.rublyov $ $Date: 2002/11/24 02:52:45 $
 * $Revision: 1.11 $ $RCSfile: CsiServices.java,v $
 *
 * Created on Nov 01, 2001, 9:15 AM
 */
package com.equant.csi.client;

import com.equant.csi.jdo.CChargeChangeItem;
import com.equant.csi.jdo.CServiceChangeItem;
import com.equant.csi.jdo.CServiceElement;
import com.equant.csi.jdo.CVersionServiceElement;
import com.equant.csi.jdo.CVersionServiceElementSts;
import org.apache.log4j.Category;
import org.apache.log4j.PropertyConfigurator;

import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Vector;

/**
 *
 * @author  SRao1
 */
public class CsiServices extends javax.swing.JFrame implements java.awt.event.ActionListener {

    private static final Category logger = Category.getInstance(CsiServices.class.getName());

    private javax.swing.JTree jTree1;

    Hashtable ht;

    /** Creates new form CsiServices */
    public CsiServices() {
        ht = new Hashtable();
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        queryPanel = new javax.swing.JPanel();
        srvElemLabel = new javax.swing.JLabel();
        srvElemField = new javax.swing.JTextField();
        srvElemButton = new javax.swing.JButton();
        useIdButton = new javax.swing.JButton();
        useIdLabel = new javax.swing.JLabel();
        useIdField = new javax.swing.JTextField();
        treePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();

        getContentPane().setLayout(null);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        queryPanel.setLayout(null);
        queryPanel.setBorder(new javax.swing.border.LineBorder(java.awt.Color.black));
        srvElemLabel.setText("ServiceElementId");
        queryPanel.add(srvElemLabel);
        srvElemLabel.setBounds(10, 40, 100, 20);
        queryPanel.add(srvElemField);
        srvElemField.setBounds(140, 40, 110, 21);
        srvElemButton.setText("Details");
        srvElemButton.setBackground(java.awt.Color.orange);
        srvElemButton.addActionListener(this);
        queryPanel.add(srvElemButton);
        srvElemButton.setBounds(290, 40, 90, 27);
        useIdButton.setText("Get UseId");
        useIdButton.setBackground(java.awt.Color.orange);
        useIdButton.addActionListener(this);
        queryPanel.add(useIdButton);
        useIdButton.setBounds(290, 10, 89, 27);
        useIdLabel.setText("New Use Id");
        queryPanel.add(useIdLabel);
        useIdLabel.setBounds(10, 10, 100, 20);
        queryPanel.add(useIdField);
        useIdField.setBounds(140, 10, 110, 21);
        getContentPane().add(queryPanel);
        queryPanel.setBounds(0, 0, 500, 80);
        treePanel.setLayout(null);
        treePanel.setBorder(new javax.swing.border.LineBorder(java.awt.Color.black));
        treePanel.add(jScrollPane1);
        jScrollPane1.setBounds(0, 10, 500, 520);
        getContentPane().add(treePanel);
        treePanel.setBounds(0, 80, 500, 520);
        pack();

    }//GEN-END:initComponents
    public Hashtable buildVersionServiceElement(CVersionServiceElement cvse) {
        Hashtable ht2 = new Hashtable();
        //Vector v = new Vector();
        HashSet hs1 = (HashSet) cvse.getCChargeChangeItemColl();//???
        HashSet hs2 = (HashSet) cvse.getCServiceChangeItemColl();
        HashSet hs3 = (HashSet) cvse.getCVerServiceElementStsColl();

        Iterator i1 = hs1.iterator();
        int chargecounter = 1;
        while (i1.hasNext()) {
            CChargeChangeItem ccci = (CChargeChangeItem) i1.next();
            Hashtable ht1 = buildChargeChangeItem(ccci);
            ht2.put("ChargeChangeItem = " + chargecounter++, ht1);
        }

        Iterator i2 = hs2.iterator();
        int servicecounter = 1;
        while (i2.hasNext()) {
            CServiceChangeItem csci = (CServiceChangeItem) i2.next();
            Hashtable ht1 = buildServiceChangeItem(csci);
            ht2.put("ServiceChangeItem = " + servicecounter++, ht1);
        }

        Iterator i3 = hs3.iterator();
        int statuscounter = 1;
        while (i3.hasNext()) {
            CVersionServiceElementSts cvses = (CVersionServiceElementSts) i3.next();
            Hashtable ht1 = buildServiceElementStatus(cvses);
            ht2.put("ServiceElementStatus = " + statuscounter++, ht1);
        }
        // ht.put("VersionServiceElement",ht2);
        return ht2;
    }

    public Hashtable buildChargeChangeItem(CChargeChangeItem ccci) {
        Hashtable ht = new Hashtable();
        Vector v = new Vector();
        if (ccci.getCRecurringCharge() != null) {
            v.addElement("ChargeCategoryId = " + ccci.getCRecurringCharge().getChgCatId());
            v.addElement("DiscountCode = " + ccci.getCRecurringCharge().getDiscCode());
            v.addElement("Amount = " + ccci.getCRecurringCharge().getAmount());
//         v.addElement ("RatingCurrency = " +ccci.getCRecurringCharge ().getRatingCurrency ());
            ht.put("RecurringCharge", v);
        } else if (ccci.getCOnceOffCharge() != null) {
            v.addElement("ChargeCategoryId = " + ccci.getCOnceOffCharge().getChgCatId());
//         v.addElement ("DiscountCode = " +ccci.getCOnceOffCharge ().getDiscCode ()); //???
            v.addElement("Amount = " + ccci.getCOnceOffCharge().getAmount());
//         v.addElement ("RatingCurrency = " +ccci.getCOnceOffCharge ().getRatingCurrency ());
            ht.put("OnceOffCharge", v);
        } else if (ccci.getCUsageCharge() != null) {
            v.addElement(ccci.getCUsageCharge().getChgCatId());
            ht.put("UsageCharge", v);
        }
        return ht;
    }

    public Hashtable buildServiceChangeItem(CServiceChangeItem csci) {
        Hashtable ht = new Hashtable();
        Vector v = new Vector();
        //Vector v1 = new Vector();
        //v1.addElement("CreationDate = " +csci.getCreateDate());
        //v1.addElement("Network Id = " + csci.getNetElmHandle());

        if (csci.getCServiceAttribute() != null) {
            v.addElement("ProductAttributeId = " + csci.getCServiceAttribute().getServiceAttributeId());//interim
            v.addElement("Value = " + csci.getCServiceAttribute().getValue());
            v.addElement("Creation Date = " + csci.getCServiceAttribute().getCreatedDate());
            ht.put("ServiceAttribute", v);
        } else if (csci.getCParentServiceElement() != null) {
            v.addElement("ParentUseId = " + csci.getCParentServiceElement().getServiceElementId());
            ht.put("ParentId", v);
        } else if (csci.getCbrotherServiceElement() != null) {
            v.addElement("BrotherId = " + csci.getCbrotherServiceElement().getServiceElementId());
            ht.put("BrotherId", v);
        }
        return ht;
    }

    public Hashtable buildServiceElementStatus(CVersionServiceElementSts cvses) {
        Hashtable ht = new Hashtable();
        Vector v = new Vector();
        if (cvses != null) {
            v.addElement("Status = " + cvses.getStatusTypeCode());
            v.addElement("StatusDate = " + cvses.getVersionServiceElementStsStatusDate());
            ht.put("Status", v);
        }
        return ht;
    }

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        evt = null;
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        PropertyConfigurator.configure("config/Logger.conf");
        CsiServices csiservices = new CsiServices();
        csiservices.setSize(500, 600);
        csiservices.setVisible(true);
    }

    public void actionPerformed(java.awt.event.ActionEvent actionEvent) {
        if (actionEvent.getSource() == useIdButton) {
            //getUseId(actionEvent);
        } else if (actionEvent.getSource() == srvElemButton) {
            getServiceElementDetails(actionEvent);
        }
    }


    public void getServiceElementDetails(java.awt.event.ActionEvent actionEvent) {
        try {
            Vector v = null;
            //***NEWFollowing Method changed in CSiApiEJB ..cahnge it
            //OLD Vector v = csiApi.getServiceDetails (Long.parseLong (srvElemField.getText ()));

            logger.debug("received Vector");
            logger.debug("the size is  " + v.size());
            CServiceElement cse = (CServiceElement) v.firstElement();

            Hashtable ht7 = new Hashtable();
            Vector v10 = new Vector();
            v10.addElement("Description =  " + cse.getDescription());
            v10.addElement("CreationDate = " + cse.getServiceElementCreationDate());

            ht7.put("Attribute", v10);
            HashSet hs = (HashSet) cse.getCVerServiceElementColl();
            Iterator i = hs.iterator();
            int counter = 1;
            while (i.hasNext()) {
                CVersionServiceElement cvse = (CVersionServiceElement) i.next();
                Hashtable ht5 = buildVersionServiceElement(cvse);
                ht7.put("VersionServiceElement = " + counter++, ht5);
            }
            ht.put("ServiceElement", ht7);
            jTree1 = new javax.swing.JTree(ht);
            jScrollPane1.setViewportView(jTree1);
        } catch (Exception ex) {
            logger.error(ex.toString(), ex);
        }
    }


/*
    public void getUseId(java.awt.event.ActionEvent actionEvent) {
        logger.debug("Entering...");
        try {
//         *****getUseId() method is no more existing in CSI phase-2
//          Double val = csiApi.getUseId ();
//          logger.debug ("New UseId |" + val.doubleValue () + "|");
//          useIdField.setText (val.toString ());
        } catch (Exception ex) {
            logger.error(ex.toString(), ex);
            logger.debug("Leaving...");
        }
        logger.debug("Leaving...");
    }

*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel queryPanel;
    private javax.swing.JLabel srvElemLabel;
    private javax.swing.JTextField srvElemField;
    private javax.swing.JButton srvElemButton;
    private javax.swing.JButton useIdButton;
    private javax.swing.JLabel useIdLabel;
    private javax.swing.JTextField useIdField;
    private javax.swing.JPanel treePanel;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

}
